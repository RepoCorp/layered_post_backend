AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  ServerlessDemo

  Sample SAM Template for ServerlessDemo

Parameters:

  Prefix:
    Type: String
    Description: Prefix for resources

  DocDBVPCSubnet:
    Type: AWS::EC2::Subnet::Id
    Description: VPC Subnet with connectivity to Amazon DocumentDB cluster

  DocDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Security group with access to Amazon DocumentDB from within the VPC

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30
    MemorySize: 2048
    Environment:
      Variables:
        SECRET_KEY: layered_blog_db

Resources:
  MyApi:
    Type: 'AWS::Serverless::Api'
    Properties:
      StageName: Prod

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AWSLambdaExecute
      RoleName: !Sub ${Prefix}-Role-Lambda

  LambdaLayerRequirements:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub ${Prefix}-Layer-requirements
      Description: Layer for requirements
      ContentUri: layer-requirements.zip
      CompatibleRuntimes:
        - python3.9
      LicenseInfo: 'MIT'
      RetentionPolicy: Retain

  BlogPostCreate:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: blog/create_post/
      Handler: app.lambda_handler
      Layers:
        - !Ref LambdaLayerRequirements
      Runtime: python3.9
      Events:
        BlogCreateUserPostAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: '/blog-post'
            Method: POST
      Role: !GetAtt LambdaExecutionRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref DocDBSecurityGroup
        SubnetIds:
          - !Ref DocDBVPCSubnet

  BlogPostGet:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: blog/get_post/
      Handler: app.lambda_handler
      Layers:
        - !Ref LambdaLayerRequirements
      Runtime: python3.9
      Events:
        BlogCreateUserGetAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: '/blog-post/{id}'
            Method: GET
      Role: !GetAtt LambdaExecutionRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref DocDBSecurityGroup
        SubnetIds:
          - !Ref DocDBVPCSubnet

  BlogPostUpdate:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: blog/update_post
      Handler: app.lambda_handler
      Layers:
        - !Ref LambdaLayerRequirements
      Runtime: python3.9
      Events:
        BlogCreateUserGetAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: '/blog-post/{id}'
            Method: POST
      Role: !GetAtt LambdaExecutionRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref DocDBSecurityGroup
        SubnetIds:
          - !Ref DocDBVPCSubnet


  BlogPostList:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: blog/list_post/
      Handler: app.lambda_handler
      Layers:
        - !Ref LambdaLayerRequirements
      Runtime: python3.9
      Events:
        BlogCreateUserGetAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: '/blog-post'
            Method: GET
      Role: !GetAtt LambdaExecutionRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref DocDBSecurityGroup
        SubnetIds:
          - !Ref DocDBVPCSubnet
